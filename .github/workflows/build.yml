# Most of this workflow is based on this blog post: https://bee42.com/de/blog/tutorials/dockerized-the-apple-silicon/

name: Build

on:
  push:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
#      - '!release'  # excludes release branch
#    schedule:
#      - cron: "0 22 * * *"

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    env:
      MAVEN_OPTIONS: "--quiet --batch-mode --no-transfer-progress"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: OSSRH_USERNAME # env variable for username in deploy
        server-password: OSSRH_PASSWORD # env variable for token in deploy
        gpg-private-key: ${{ secrets.OSSRH_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: OSSRH_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Prepare version and docker tags
      id: prep
      run: |
        CURRENT_VERSION="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
        echo CURRENT_VERSION=$CURRENT_VERSION
        SNAPSHOT_VERSION=${CURRENT_VERSION}
        echo SNAPSHOT_VERSION=$SNAPSHOT_VERSION
        RELEASE_VERSION=${CURRENT_VERSION/-SNAPSHOT/}
        echo RELEASE_VERSION=$RELEASE_VERSION
        NEXT_SNAPSHOT_VERSION="$(mvn build-helper:parse-version -DgenerateBackupPoms=false -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} help:evaluate -Dexpression=newVersion -q -DforceStdout)-SNAPSHOT"
        echo NEXT_SNAPSHOT_VERSION=$NEXT_SNAPSHOT_VERSION
        DOCKER_IMAGE=$(mvn help:evaluate -Dexpression=docker.image -q -DforceStdout)
        echo DOCKER_IMAGE=$DOCKER_IMAGE
        CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
        echo CURRENT_BRANCH=$CURRENT_BRANCH
        REVISION_BRANCH=$(if [[ ${CURRENT_BRANCH} != "release" && ${CURRENT_BRANCH} != "main" ]];then echo "-${CURRENT_BRANCH}"; else echo ""; fi)
        echo REVISION_BRANCH=$REVISION_BRANCH
        REVISION_TYPE=$(if [[ ${CURRENT_BRANCH} != "release" ]];then echo "-SNAPSHOT"; fi)
        echo REVISION_TYPE=$REVISION_TYPE
        DOCKER_TAGS=$(if [[ ${CURRENT_BRANCH} == "release" ]];then echo "${DOCKER_IMAGE}:${RELEASE_VERSION},${DOCKER_IMAGE}:latest"; else echo "${DOCKER_IMAGE}:${SNAPSHOT_VERSION}"; fi)
        echo DOCKER_TAGS=$DOCKER_TAGS
        echo ::set-output name=current_version::${CURRENT_VERSION}
        echo ::set-output name=snapshot_version::${SNAPSHOT_VERSION}
        echo ::set-output name=release_version::${RELEASE_VERSION}
        echo ::set-output name=next_snapshot_version::${NEXT_SNAPSHOT_VERSION}
        echo ::set-output name=current_branch::${CURRENT_BRANCH}
        echo ::set-output name=revision_branch::${REVISION_BRANCH}
        echo ::set-output name=revision_type::${REVISION_TYPE}
        echo ::set-output name=docker_tags::${DOCKER_TAGS}

    - name: Build, test and deploy a snapshot with maven
      if: "contains(steps.prep.outputs.revision_type, 'SNAPSHOT')"
      run: |
        mvn ${MAVEN_OPTIONS} deploy
        # Unpack jar for docker image build
        PROJECT_BUILD_FINAL_NAME=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout)
        mkdir -p target/dependency && (cd target/dependency; jar -xf ../${PROJECT_BUILD_FINAL_NAME}.jar)
      env:
        MAVEN_OPTIONS: ${{ env.MAVEN_OPTIONS }}
        GITHUB_TOKEN: ${{ github.token }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}

    - name: Build, test and deploy a release with maven
      if: "!contains(steps.prep.outputs.revision_type, 'SNAPSHOT')"
      run: |
        # Configure git
        git config user.name github-actions
        git config user.email github-actions@github.com
        # Build and deploy
        mvn ${MAVEN_OPTIONS} versions:set -DnewVersion=${RELEASE_VERSION}
        mvn ${MAVEN_OPTIONS} -Dusername=${GITHUB_TOKEN} -Prelease clean deploy
        # Unpack jar for docker image build
        PROJECT_BUILD_FINAL_NAME=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout)
        mkdir -p target/dependency && (cd target/dependency; jar -xf ../${PROJECT_BUILD_FINAL_NAME}.jar)
        # Increment revision of develop branch based on main revision value
        git reset --hard origin/release
        git fetch --all --tags
        git checkout main
        git reset --hard origin/main
        git pull --all --ff-only
        mvn ${MAVEN_OPTIONS} -DgenerateBackupPoms=false versions:set -DnewVersion=${NEXT_SHAPSHOT_VERSION}
        #mvn ${MAVEN_OPTIONS} compile #Only needed if eg. README will be generated which includes the version number 
        git commit -am "Updated revision to ${NEXT_SHAPSHOT_VERSION}. Prepared for next development iteration." && git push
        git reset --hard
        git checkout release
      env:
        MAVEN_OPTIONS: ${{ env.MAVEN_OPTIONS }}
        RELEASE_VERSION: ${{ steps.prep.outputs.release_version }}
        NEXT_SHAPSHOT_VERSION: ${{ steps.prep.outputs.next_snapshot_version }}
        GITHUB_TOKEN: ${{ github.token }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        platforms: linux/amd64,linux/arm64
        build-args: |
            DEPENDENCY=target/dependency
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.docker_tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    - name: Create Release
      if: "!contains(steps.prep.outputs.revision_type, 'SNAPSHOT')"
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.prep.outputs.release_version }}
        release_name: ${{ steps.prep.outputs.release_version }}
        draft: false
        prerelease: false
        
    - name: Quality check of build with maven and sonar
      if: "contains(steps.prep.outputs.revision_type, 'SNAPSHOT')"
      run: mvn ${MAVEN_OPTIONS} -Pquality verify # Test already run in previous step
      env:
        MAVEN_OPTIONS: ${{ env.MAVEN_OPTIONS }}
        GITHUB_TOKEN: ${{ github.token }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Quality check of relase with maven and sonar
      if: "!contains(steps.prep.outputs.revision_type, 'SNAPSHOT')"
      run: |
        mvn ${MAVEN_OPTIONS} versions:set -DnewVersion=${RELEASE_VERSION}
        mvn ${MAVEN_OPTIONS} -Pquality verify # Test already run in previous step
      env:
        MAVEN_OPTIONS: ${{ env.MAVEN_OPTIONS }}
        RELEASE_VERSION: ${{ steps.prep.outputs.release_version }}
        GITHUB_TOKEN: ${{ github.token }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}